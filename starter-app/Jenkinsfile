/*
 * Copyright (c) Interactive Information R & D (I2RD) LLC.
 * All Rights Reserved.
 *
 * This software is confidential and proprietary information of
 * I2RD LLC ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered
 * into with I2RD.
 */

def repoUser, repoPassword, gradleOptions, version;

// Note: these will never both be true but may both be false. isSnapshot will be true iff the branch is a snapshot branch and the
// version is a snapshot version. isRelease will be true iff the branch is a release branch and the version is *not* a snapshot
// version.
def isSnapshot;
def isRelease;

def atUser=''

node('!master'){
    try
    {
        echo("Change Author Email => ${env.CHANGE_AUTHOR_EMAIL}")
        if (env.CHANGE_AUTHOR_EMAIL && env.CHANGE_AUTHOR_EMAIL.indexOf('@') != -1)
        {
            atUser = '@' + env.CHANGE_AUTHOR_EMAIL.substring(0, env.CHANGE_AUTHOR_EMAIL.indexOf('@')) + ': '
        }
    }
    catch(error)
    {
        echo "Unable to get atUser: $error"
    }
    try
    {
        repoUser = repo_venturetech_username
        repoPassword = repo_venturetech_password
    }
    catch(error)
    {
        echo("Unable to get build parameter. Will try env. $error")
    }
    if(!repoUser) {
        // try environment
        echo("Checking env: ${env.repo_venturetech_username}")
        repoUser = env.repo_venturetech_username
        repoPassword = env.repo_venturetech_password
    }

    def jdkHome = tool 'JDK 8'

    checkout scm

    dir('starter-app') {

        String gradleProps = readFile('gradle.properties')
        isSnapshot = isSnapshotBranch(env.BRANCH_NAME, env.CHANGE_TARGET) &&
            getAppVersion(gradleProps).endsWith('-SNAPSHOT')
        isRelease = isSnapshotBranch(env.BRANCH_NAME, env.CHANGE_TARGET) &&
            !getAppVersion(gradleProps).endsWith('-SNAPSHOT')
        def appVersion = getAppVersion(gradleProps).replace('-SNAPSHOT', '')
        def appName = getAppName(gradleProps)
        echo 'Building ' + appName + ' ' + appVersion +
            (isSnapshot ? ' snapshot' : '') +
            (isRelease ? ' release' : '')
        version = "${appVersion}.${currentBuild.number}${isSnapshot ? '-SNAPSHOT' : ''}"
        //noinspection LongLine
        gradleOptions= $/-Duser.timezone=Etc/UTC -Prepo_venturetech_username=$repoUser -Prepo_venturetech_password=$repoPassword -Papp_version=${version}/$
        currentBuild.displayName = "v${version}"
        stage("Build") {
            gradleProps = null;
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                ansiColor('css') {
                    sh 'rm -rf .apt_generated'
                    sh 'rm -rf .apt_generated_tests'
                    sh "./gradlew clean assemble $gradleOptions"
                }
            }
            archiveArtifacts(allowEmptyArchive: true, artifacts: '**/build/gradle/libs/*', defaultExcludes: false,
                fingerprint: true, onlyIfSuccessful: true)
            step([$class        : 'WarningsPublisher', canComputeNew: true, canResolveRelativePaths: false,
                  consoleParsers: [[parserName: 'Java Compiler (javac)']], defaultEncoding: '',
                  excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''])
            step([$class: 'TasksPublisher', canComputeNew: true, defaultEncoding: '', excludePattern: '',
                  healthy: '', high: 'FIXME', low: '', normal: 'TODO', pattern: 'src/**/*.java', unHealthy: ''])
        }
    }
    stash excludes: '**/.git,**/.git/**,**/compiletime-aspects/**,**/runtime-aspects/**,**/build/gradle/libs/*.war', name: 'StarterAppFiles', useDefaultExcludes: false
}
stage('Tests') {
    parallel(["Unit Tests": {
        node('!master') {
            //        stage 'Unit Tests'
            def jdkHome = tool 'JDK 8'
            unstash 'StarterAppFiles'
            dir('starter-app') {
                withEnv(["JAVA_HOME=$jdkHome"]) {
                    // Run the build
                    ansiColor('css') {
                        sh "./gradlew test $gradleOptions"
                    }
                }
                junit(allowEmptyResults: true, healthScaleFactor: 2.0, keepLongStdio: true,
                    testResults: '**/build/gradle/test-results/**/TEST*.xml')

            }
        }
    }, "Integration Tests": {

        node('!master') {
            //        stage 'Integration Tests'
            def jdkHome = tool 'JDK 8'
            unstash 'StarterAppFiles'
            dir('starter-app') {
                withEnv(["JAVA_HOME=$jdkHome"]) {
                    // Run the build
                    ansiColor('css') {
                        sh "./gradlew test -PtestGroups=integration $gradleOptions"
                    }
                }
                junit(allowEmptyResults: true, healthScaleFactor: 4.0, keepLongStdio: true,
                    testDataPublishers: [[$class: 'ClaimTestDataPublisher']],
                    testResults: '**/build/gradle/test-results/**/TEST*.xml')

            }
        }
    }, failFast: true])
}
stage('Static Analysis') {
    parallel(["Coding Conventions": { node('!master') {
        def jdkHome = tool 'JDK 8'
        unstash 'StarterAppFiles'
        dir('starter-app') {
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                ansiColor('css') {
                    sh "./gradlew checkstyleMain $gradleOptions"
                }
            }
            step([$class         : 'CheckStylePublisher', canComputeNew: true, defaultEncoding: 'UTF-8', failedTotalAll: '25',
                  failedTotalHigh: '2', failedTotalNormal: '25', healthy: '5', pattern: '**/build/gradle/reports/checkstyle/*.xml',
                  unHealthy      : '100', unstableTotalAll: '10', unstableTotalHigh: '2', unstableTotalNormal: '10'])

        }
    }},
    "Code Quality": { node('!master') {
        def jdkHome = tool 'JDK 8'
        unstash 'StarterAppFiles'
        dir('starter-app') {
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                ansiColor('css') {
                    sh "./gradlew findbugsMain $gradleOptions"
                }
            }
            step([$class: 'FindBugsPublisher', canComputeNew: true, defaultEncoding: 'UTF-8',
                  excludePattern: '', failedTotalAll: '8', failedTotalHigh: '5', failedTotalNormal: '8', healthy: '5',
                  includePattern: '', pattern: '**/build/gradle/reports/findbugs/*.xml', thresholdLimit: 'normal',
                  unHealthy: '50', unstableTotalAll: '5', unstableTotalHigh: '2', unstableTotalNormal: '5'])
        }
    }}])
}

node {
    def jdkHome = tool 'JDK 8'
    unstash 'StarterAppFiles'
    stage('JavaDoc') {
        dir('starter-app') {
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                ansiColor('css') {
                    sh "./gradlew javadoc $gradleOptions"
                }
            }
            step([$class        : 'WarningsPublisher', canComputeNew: true, canResolveRelativePaths: false,
                  consoleParsers: [[parserName: 'JavaDoc Tool']], defaultEncoding: '', excludePattern: '', healthy: '',
                  includePattern: '', messagesPattern: '', unHealthy: ''])

            step([$class: 'JavadocArchiver', javadocDir: 'build/gradle/docs/javadoc', keepAll: false])

            step([$class : 'AnalysisPublisher', canComputeNew: true, defaultEncoding: '',
                  healthy: '', pmdActivated: false, unHealthy: ''])
        }
    }
    stage('Libraries') {
        dir('starter-app') {
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                ansiColor('css') {
                    sh "./gradlew assemble -x jar -x war $gradleOptions -Pcompile_libraries=true"
                }
            }
        }
    }
}

if (currentBuild.result == 'SUCCESS')
{
    try
    {
        stage 'Publish'
        if (isSnapshot || isRelease)
        {
            timeout(time: 4, unit: 'HOURS') {
                //noinspection LongLine
                slackSend color: 'good', message: "${atUser}${env.JOB_NAME} ${currentBuild.displayName} can be published to the artifactory repo.\n(<${env.JOB_URL}|Open>)"

                input id: 'Publish', message: "Publish Artifacts v${version} To Repo Server", ok: 'Publish Artifacts'
                node {
                    def jdkHome = tool 'JDK 8'
                    unstash 'StarterAppFiles'

                    dir('starter-app') {
                        withEnv(["JAVA_HOME=$jdkHome", "GRADLE_OPTS=-Xmx2024m -Xms512m"]) {
                            withCredentials([
                                usernamePassword(
                                    credentialsId: 'publish-venturetech-credentials',
                                    usernameVariable: 'PUBLISH_VENTURETECH_USERNAME',
                                    passwordVariable: 'PUBLISH_VENTURETECH_PASSWORD')]) {
                                // Run the build
                                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                                    echo "Publishing artifacts"

                                    // Note: do not use string interpolation here. These variables are from the environment.
                                    final additionalArgs =
                                        'artifactoryPublish ' +
                                        '-Ppublish_venturetech_username="$PUBLISH_VENTURETECH_USERNAME" ' +
                                        '-Ppublish_venturetech_password="$PUBLISH_VENTURETECH_PASSWORD"'
                                    sh "./gradlew $gradleOptions $additionalArgs -Papp_version=$version"
                                }
                            }
                        }
                    }
                    slackSend color: 'good',
                        message: "${atUser}${env.JOB_NAME} ${currentBuild.displayName} has been published to artifactory."
                }
            }
        }
        if (isSnapshot)
        {
            stage('Deploy') {
                timeout(time: 1, unit: 'HOURS') {
                    //noinspection LongLine
                    slackSend color: 'good',
                        message: "${atUser}${env.JOB_NAME} ${currentBuild.displayName} can be deployed to QA for testing.\n" +
                            "(<${env.JOB_URL}|Open>)"
                    //noinspection LongLine
                    def params = input id: 'Deploy', message: 'Deploy build to Server?', ok: 'Deploy', parameters: [choice(choices: ['starter-app-qa', 'starter-app-release'], description: '', name: 'proteus_install_name')]

                    node('!master') {
                        def jdkHome = tool 'JDK 8'
                        unstash 'StarterAppFiles'

                        dir('starter-app') {
                            withEnv(["JAVA_HOME=$jdkHome"]) {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                                  accessKeyVariable: 'aws_id', credentialsId:
                                                      'proteus-sys-jenkins-integration', secretKeyVariable: 'aws_secret']]) {
                                    // Run the build
                                    ansiColor('css') {
                                        //noinspection LongLine
                                        echo "Deploying artifacts"
                                        def additionalArgs = "autoDeploy -Paws_id=${env.aws_id} -Paws_secret=${env.aws_secret} -Pproteus_install_name=${params.proteus_install_name}"
                                        sh "./gradlew $gradleOptions $additionalArgs"
                                    }
                                }
                            }
                        }
                        slackSend color: 'good',
                            message: "${atUser}${env.JOB_NAME} ${currentBuild.displayName} is being deployed to QA for testing."
                    }
                }
            }
        }
    }
    catch (error) {
        echo "$error"
        //Skipping publish task
    }
}

if(currentBuild.result == 'FAILURE') {
    //noinspection LongLine
    slackSend color: 'danger', message: "${atUser}${env.JOB_NAME} ${currentBuild.displayName} failed.\n(<${env.JOB_URL}|Open>)"
    mail to: "${env.CHANGE_AUTHOR_EMAIL}",
        subject: "Job '${env.JOB_NAME}' (${currentBuild.displayName}) failed",
        body: "Please go to ${env.BUILD_URL} and review the failure."
} else if(currentBuild.result == 'SUCCESS' && currentBuild?.previousBuild?.result != 'SUCCESS') {
    slackSend color: 'good', message: "${atUser} ${env.JOB_NAME} ${currentBuild.displayName} is back to normal."
}


@NonCPS
def getAppVersion(String text)
{
    def matcher = text =~ /app_version=(.+)/
    return matcher ? matcher[0][1] : '0.0'
}

@NonCPS
def getAppName(String text)
{
    def matcher = text =~ /app_name=(.+)/
    return matcher ? matcher[0][1] : 'App'
}

/**
 * Check if the commit is on or being merged to a snapshot branch.
 *
 * @param commitBranch the branch the commit is on
 * @param targetBranch the branch the commit will be merged to if it is a pull request
 *
 * @return true if the commit is for a snapshot branch
 */
@NonCPS
boolean isSnapshotBranch(final String commitBranch, final String targetBranch)
{
    final pullRequest = commitBranch.startsWith('PR-')
    final branch = pullRequest? targetBranch : commitBranch

    return branch?.startsWith('sprint/')
}

/**
 * Check if the commit is on or being merged to a release branch.
 *
 * @param commitBranch the branch the commit is on
 * @param targetBranch the branch the commit will be merged to if it is a pull request
 *
 * @return true if the commit is for a release branch
 */
@NonCPS
boolean isReleaseBranch(final String name)
{
    final pullRequest = commitBranch.startsWith('PR-')
    final branch = pullRequest? targetBranch : commitBranch
    return branch == 'master' || branch?.startsWith('release/')
}
