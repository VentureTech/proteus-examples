import com.proteusframework.build.Property

// Check required properties
def props = [
    new Property(name:'repo_venturetech_username',description:'Username to access the artifact repository'),
    new Property(name:'repo_venturetech_password',description:'Password to access the artifact repository'),
    new Property(name:'publish_venturetech_username',description:'Username to upload to the artifact repository', required:false),
    new Property(name:'publish_venturetech_password',description:'Password to upload to the artifact repository', required:false),
];


settings.rootProject.name = "${app_name}"

settings.gradle.projectsLoaded( {
    props.each({it.test(settings)})

    def hasLocalRepo = settings.hasProperty('local_repo')
    if(hasLocalRepo) {
        def repoHost = new URL(settings.getProperty('local_repo')).getHost()
        def pingCommand = null
        if(new File('/bin/ping').canExecute())
            pingCommand = '/bin/ping'
        else if(new File('/sbin/ping').canExecute())
            pingCommand = '/sbin/ping'
        if(pingCommand)
        {
            def baseDir = settings.gradle.rootProject.rootDir
            def envp = System.getenv().collect({k, v -> "${k}=${v}"})
            def isMac = System.getProperty('os.name', '').toLowerCase().contains('mac')
            def command = isMac ? [pingCommand, '-q', '-W', '250', '-c', '1', repoHost] :
                [pingCommand, '-q', '-w', '0.25', '-c', '1', repoHost]
            def process = command.execute(envp, baseDir)
            process.consumeProcessOutput(System.out, System.err)
            if(process.waitFor() != 0) {
                hasLocalRepo = false
            }
        }
    }
    println "Has Local Repo? $hasLocalRepo"
    settings.gradle.rootProject.ext.hasLocalRepo = hasLocalRepo;
    settings.gradle.rootProject.ext.repoReleaseURL = "${repo_venture_tech_url}/release"
    settings.gradle.rootProject.ext.repoSnapshotURL = "${repo_venture_tech_url}/snapshot"
    settings.gradle.rootProject.ext.warTaskSpecified = gradle.startParameter.taskNames.any {it == 'war'}
    settings.gradle.rootProject.ext.isIDEA = System.getProperties().containsKey('idea.active') ||
        System.getProperties().containsKey('idea.paths.selector') ||
        plugins.any({it.class.name == 'JetGradlePlugin'})
    settings.gradle.rootProject.ext.isEclipse = System.getProperties().containsKey('eclipse.product')
    settings.gradle.rootProject.ext.compileLibraries = settings.hasProperty('compile_libraries') ||
        settings.gradle.rootProject.ext.isIDEA;
    
})

